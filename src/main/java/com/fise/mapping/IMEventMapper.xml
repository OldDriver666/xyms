<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fise.dao.IMEventMapper">
  <resultMap id="BaseResultMap" type="com.fise.model.entity.IMEvent">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="event_key" jdbcType="INTEGER" property="eventKey" />
    <result column="location_x" jdbcType="VARCHAR" property="locationX" />
    <result column="location_y" jdbcType="VARCHAR" property="locationY" />
    <result column="location_from" jdbcType="INTEGER" property="locationFrom" />
    <result column="battery" jdbcType="INTEGER" property="battery" />
    <result column="sq" jdbcType="INTEGER" property="sq" />
    <result column="event_level" jdbcType="INTEGER" property="eventLevel" />
    <result column="param" jdbcType="VARCHAR" property="param" />
    <result column="updated" jdbcType="INTEGER" property="updated" />
    <result column="created" jdbcType="INTEGER" property="created" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_id, event_key, location_x, location_y, location_from, battery, sq, event_level, 
    param, updated, created
  </sql>
  <select id="selectByExample" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from ${tableName}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from IMEvent
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from IMEvent
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.fise.model.entity.IMEventExample">
    delete from IMEvent
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.fise.model.entity.IMEvent">
    insert into IMEvent (id, user_id, event_key, 
      location_x, location_y, location_from, 
      battery, sq, event_level, 
      param, updated, created
      )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{eventKey,jdbcType=INTEGER}, 
      #{locationX,jdbcType=VARCHAR}, #{locationY,jdbcType=VARCHAR}, #{locationFrom,jdbcType=INTEGER}, 
      #{battery,jdbcType=INTEGER}, #{sq,jdbcType=INTEGER}, #{eventLevel,jdbcType=INTEGER}, 
      #{param,jdbcType=VARCHAR}, #{updated,jdbcType=INTEGER}, #{created,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.fise.model.entity.IMEvent">
    insert into IMEvent
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="eventKey != null">
        event_key,
      </if>
      <if test="locationX != null">
        location_x,
      </if>
      <if test="locationY != null">
        location_y,
      </if>
      <if test="locationFrom != null">
        location_from,
      </if>
      <if test="battery != null">
        battery,
      </if>
      <if test="sq != null">
        sq,
      </if>
      <if test="eventLevel != null">
        event_level,
      </if>
      <if test="param != null">
        param,
      </if>
      <if test="updated != null">
        updated,
      </if>
      <if test="created != null">
        created,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="eventKey != null">
        #{eventKey,jdbcType=INTEGER},
      </if>
      <if test="locationX != null">
        #{locationX,jdbcType=VARCHAR},
      </if>
      <if test="locationY != null">
        #{locationY,jdbcType=VARCHAR},
      </if>
      <if test="locationFrom != null">
        #{locationFrom,jdbcType=INTEGER},
      </if>
      <if test="battery != null">
        #{battery,jdbcType=INTEGER},
      </if>
      <if test="sq != null">
        #{sq,jdbcType=INTEGER},
      </if>
      <if test="eventLevel != null">
        #{eventLevel,jdbcType=INTEGER},
      </if>
      <if test="param != null">
        #{param,jdbcType=VARCHAR},
      </if>
      <if test="updated != null">
        #{updated,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        #{created,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.fise.model.entity.IMEventExample" resultType="java.lang.Long">
    select count(*) from IMEvent
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update IMEvent
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.eventKey != null">
        event_key = #{record.eventKey,jdbcType=INTEGER},
      </if>
      <if test="record.locationX != null">
        location_x = #{record.locationX,jdbcType=VARCHAR},
      </if>
      <if test="record.locationY != null">
        location_y = #{record.locationY,jdbcType=VARCHAR},
      </if>
      <if test="record.locationFrom != null">
        location_from = #{record.locationFrom,jdbcType=INTEGER},
      </if>
      <if test="record.battery != null">
        battery = #{record.battery,jdbcType=INTEGER},
      </if>
      <if test="record.sq != null">
        sq = #{record.sq,jdbcType=INTEGER},
      </if>
      <if test="record.eventLevel != null">
        event_level = #{record.eventLevel,jdbcType=INTEGER},
      </if>
      <if test="record.param != null">
        param = #{record.param,jdbcType=VARCHAR},
      </if>
      <if test="record.updated != null">
        updated = #{record.updated,jdbcType=INTEGER},
      </if>
      <if test="record.created != null">
        created = #{record.created,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update IMEvent
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      event_key = #{record.eventKey,jdbcType=INTEGER},
      location_x = #{record.locationX,jdbcType=VARCHAR},
      location_y = #{record.locationY,jdbcType=VARCHAR},
      location_from = #{record.locationFrom,jdbcType=INTEGER},
      battery = #{record.battery,jdbcType=INTEGER},
      sq = #{record.sq,jdbcType=INTEGER},
      event_level = #{record.eventLevel,jdbcType=INTEGER},
      param = #{record.param,jdbcType=VARCHAR},
      updated = #{record.updated,jdbcType=INTEGER},
      created = #{record.created,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.fise.model.entity.IMEvent">
    update IMEvent
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="eventKey != null">
        event_key = #{eventKey,jdbcType=INTEGER},
      </if>
      <if test="locationX != null">
        location_x = #{locationX,jdbcType=VARCHAR},
      </if>
      <if test="locationY != null">
        location_y = #{locationY,jdbcType=VARCHAR},
      </if>
      <if test="locationFrom != null">
        location_from = #{locationFrom,jdbcType=INTEGER},
      </if>
      <if test="battery != null">
        battery = #{battery,jdbcType=INTEGER},
      </if>
      <if test="sq != null">
        sq = #{sq,jdbcType=INTEGER},
      </if>
      <if test="eventLevel != null">
        event_level = #{eventLevel,jdbcType=INTEGER},
      </if>
      <if test="param != null">
        param = #{param,jdbcType=VARCHAR},
      </if>
      <if test="updated != null">
        updated = #{updated,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fise.model.entity.IMEvent">
    update IMEvent
    set user_id = #{userId,jdbcType=INTEGER},
      event_key = #{eventKey,jdbcType=INTEGER},
      location_x = #{locationX,jdbcType=VARCHAR},
      location_y = #{locationY,jdbcType=VARCHAR},
      location_from = #{locationFrom,jdbcType=INTEGER},
      battery = #{battery,jdbcType=INTEGER},
      sq = #{sq,jdbcType=INTEGER},
      event_level = #{eventLevel,jdbcType=INTEGER},
      param = #{param,jdbcType=VARCHAR},
      updated = #{updated,jdbcType=INTEGER},
      created = #{created,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>